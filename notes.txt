creating notes file to get all the instructions saved up.

1. Preparing a Wallet:
coin ownership is transferred on the Blockchain as transactions, participants have an address which funds can be sent to and from. In their basic form wallets can just store these addresses

creating a wallet class:
    for the blockChain, the public key will act as an address, and the private key will be used to sign the transactions, to authenticate them on their end.
    we send our public key along with the transaction, and it can be used to verify that our signature is valid and data has not been tampered with.

now we added generateKeyPair() method:

it uses Java.security.KeyPairGenerator to generate an Elliptic Curve KeyPair. These methods make and sets our Public and Private keys.

2. Transactions and Signatures:
    Each transaction will carry a certain amount of data:

    > The public key(address) of the sender of funds.
    > The public key(address) of the receiver of funds.
    > The value/amount of funds to be transferred.
    > Inputs, which are references to previous transactions that prove the sender has funds to send.
    > Outputs, which shows the amount relevant addresses received in the transaction. ( These outputs are referenced as inputs in new transactions )
    > A cryptographic signature, that proves the owner of the address is the one sending this transaction and that the data hasn’t been changed. ( for example: preventing a third party from changing the amount sent )

now we create a transaction class:

the main purpose of the signature is:
    Firstly, they allow only the owner to spend their coins, secondly, they prevent others from tampering with their submitted transaction before a new block is mined

    The private key is used to sign the data and the public key can be used to verify its integrity.

the signatures will now be verified by miners as a new transaction is added to the block

3. Testing the Wallets and Signatures

    as we add wallets, testing out the signatures, and tracking the public key of the previous and current block to confirm that the data hasn't been tampered with and transaction is carried out successfully.

4. Inputs & Outputs 1: How cryptocurrency is owned ?
    For us to own 1 bitcoin, we have to receive 1 Bitcoin. The ledger doesn’t add one bitcoin to us and minus one from the sender, the sender referenced that he/she previously received one bitcoin, then a transaction output was created showing that 1 Bitcoin was sent to your address. (Transaction inputs are references to previous transaction outputs.)

    Our wallets balance is the sum of all the unspent transaction outputs(UTXOs) addressed to you

    so we create a TransactionInput Class and a TransactionOutputs Class.



5. Inputs & Outputs 2: Processing the transaction

    Blocks in the chain may receive many transactions and the blockchain might be very, very long, it could take eons to process a new transaction because we have to find and check its inputs. To get around this we will keep an extra collection of all unspent transactions that can be used as inputs.

    For this we will be adding an extra collection of all unspent transaction that can be used as inputs. (in the memeChain class)

    now will add the process of transaction with the processTransaction boolean method in the Transaction.java

    inputs are discarded out of the list of UTXOs, meaning a transaction output can only be used once as an input, so when all inputs are used (must be used) and hence the sender sends change back to themselves.

    now, updating the wallet.java







